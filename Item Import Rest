"""
    A simple call to update standard costs in icsw. Included as an example of use of the SXAPIs
    
"""
from __future__ import print_function
#import zeep
import csv
import requests
import json
#from lxml import etree

def main(mode = 'test'):
    _mode = mode
    if _mode == 'prod':
        #endpoint = 'https://tstxiplatform.PSSdev.local:7443/infor/SX/rest/sxapirestservice/'
        endpoint = 'http://psssxe3:8080/rest/sxapirestservice/'
    else:
        #endpoint = 'https://xiplatform.us-ad.pssigroup.com:7443/infor/SX/rest/sxapirestservice/'
        endpoint = 'http://psssxe2:8185/rest/sxapirestservice/'

   #wsdl = 'http://'+web_srv+'/sxapi/ServiceIC.svc?wsdl'    #pull in the WSDL
   #client = zeep.Client(wsdl=wsdl)
    companyNumber = 1
    operatorInit = 'atst'
    operatorPassword = 'A3F7c?K23E^'
        
    file = '//pssfile2/Users/dbriggs/My Documents/Programming/SXe Item Import/PSS Cost Cleanup 05-16.csv'
    logfile = '//pssfile2/Users/dbriggs/My Documents/Programming/SXe Item Import/log2.txt'
    chg_list = []

    with open(file) as csvfile:
        reader = csv.DictReader(csvfile)
        set_no = 1
        for row in reader:
            seq_no = 1
            key1 = row['prod']
            key2 = row['whse']
            for key in row.keys():
                if key not in ['prod','whse']:
                    tmp_dict = {}
                    tmp_dict['fieldName'] = key.lower()
                    tmp_dict['fieldValue'] = row[key]
                    tmp_dict['key1'] = key1
                    tmp_dict['key2'] = key2
                    tmp_dict['seqNo'] = seq_no
                    tmp_dict['setNo'] = set_no
                    tmp_dict['updateMode'] = 'add'
                    chg_list.append(tmp_dict)
                    seq_no += 1
            
            set_no += 1
             

      #user credentials, need to be included in every call
    request={'request':                         #the request payload. See ICProductMnt in the SXAPI docs for more information on structure
                {
                    'companyNumber': companyNumber,
                    'operatorInit' : operatorInit,
                    'operatorPassword' : operatorPassword,
                    'tMntTt' : chg_list
                }
            }
    with open(logfile, 'a') as logf:
        logf.write(request)
        logf.write('\n')
            
    #response = client.service.ICProductMnt(callConnection=connection_info, request=request)    #the actual SOAP call to ICProductMnt
    response = requests.get(endpoint+'sxapiicproductmnt', headers=request)    
    if response.status_code == requests.codes.ok:
        with open(logfile, 'a') as logf:
            print(response, file=logf)
    
    else:
        with open(logfile, 'a') as logf:
            print(response, file=logf)
    #print dir(response)


    

#ET.tostring(client.create_message(client.service, 'ICProductMnt', callConnection=connection_info, request={}))

"""
request={'InfieldModification':                         #the request payload. See ICProductMnt in the SXAPI docs for more information on structure
            {'InfieldModification':
                [
                    {'FieldName':'stndcost', 'FieldValue':57.05, 'Key1':'AME1715100', 'Key2':'200P', 'SequenceNumber':1, 'SetNumber':1, 'UpdateMode':'chg'},
                    {'FieldName':'stndcost', 'FieldValue':45.03, 'Key1':'AME17093', 'Key2':'200P', 'SequenceNumber':1, 'SetNumber':2, 'UpdateMode':'chg'}
                ]
            }
        }
"""

"""
-Login, use sxe login for authentication?
-Upload Excel file with column headers
    -for each line
        -check all items with blank key2 (icsp only) using sxapiICGetProductListv2 and determine whether they exist
            -if they don't, flag the line as add
            -if they do, flag the line with chg
        -check all items with key2 filled (icsw) using sxapiICGetWhseProductList to determine whether they exist
            -if they don't, flag the line as add
            -if they do, flag the line with chg
-Prepare data for call
    -Allocate a set number for every line in the input file
        -Allocate a sequence for every column in the line
        -

"""

if __name__ == "__main__":
    main(mode='test')